{"ast":null,"code":"import { Children as $iqq3r$Children, cloneElement as $iqq3r$cloneElement, useState as $iqq3r$useState, useRef as $iqq3r$useRef, useEffect as $iqq3r$useEffect, useCallback as $iqq3r$useCallback, useReducer as $iqq3r$useReducer } from \"react\";\nimport { flushSync as $iqq3r$flushSync } from \"react-dom\";\nimport { useComposedRefs as $iqq3r$useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { useLayoutEffect as $iqq3r$useLayoutEffect } from \"@radix-ui/react-use-layout-effect\";\nfunction $fe963b355347cc68$export$3e6543de14f8614f(initialState, machine) {\n  return $iqq3r$useReducer((state, event) => {\n    const nextState = machine[state][event];\n    return nextState !== null && nextState !== void 0 ? nextState : state;\n  }, initialState);\n}\nconst $921a889cee6df7e8$export$99c2b779aa4e8b8b = props => {\n  const {\n    present: present,\n    children: children\n  } = props;\n  const presence = $921a889cee6df7e8$var$usePresence(present);\n  const child = typeof children === 'function' ? children({\n    present: presence.isPresent\n  }) : $iqq3r$Children.only(children);\n  const ref = $iqq3r$useComposedRefs(presence.ref, child.ref);\n  const forceMount = typeof children === 'function';\n  return forceMount || presence.isPresent ? /*#__PURE__*/$iqq3r$cloneElement(child, {\n    ref: ref\n  }) : null;\n};\n$921a889cee6df7e8$export$99c2b779aa4e8b8b.displayName = 'Presence';\n/* -------------------------------------------------------------------------------------------------\n * usePresence\n * -----------------------------------------------------------------------------------------------*/\nfunction $921a889cee6df7e8$var$usePresence(present) {\n  const [node1, setNode] = $iqq3r$useState();\n  const stylesRef = $iqq3r$useRef({});\n  const prevPresentRef = $iqq3r$useRef(present);\n  const prevAnimationNameRef = $iqq3r$useRef('none');\n  const initialState = present ? 'mounted' : 'unmounted';\n  const [state, send] = $fe963b355347cc68$export$3e6543de14f8614f(initialState, {\n    mounted: {\n      UNMOUNT: 'unmounted',\n      ANIMATION_OUT: 'unmountSuspended'\n    },\n    unmountSuspended: {\n      MOUNT: 'mounted',\n      ANIMATION_END: 'unmounted'\n    },\n    unmounted: {\n      MOUNT: 'mounted'\n    }\n  });\n  $iqq3r$useEffect(() => {\n    const currentAnimationName = $921a889cee6df7e8$var$getAnimationName(stylesRef.current);\n    prevAnimationNameRef.current = state === 'mounted' ? currentAnimationName : 'none';\n  }, [state]);\n  $iqq3r$useLayoutEffect(() => {\n    const styles = stylesRef.current;\n    const wasPresent = prevPresentRef.current;\n    const hasPresentChanged = wasPresent !== present;\n    if (hasPresentChanged) {\n      const prevAnimationName = prevAnimationNameRef.current;\n      const currentAnimationName = $921a889cee6df7e8$var$getAnimationName(styles);\n      if (present) send('MOUNT');else if (currentAnimationName === 'none' || (styles === null || styles === void 0 ? void 0 : styles.display) === 'none')\n        // If there is no exit animation or the element is hidden, animations won't run\n        // so we unmount instantly\n        send('UNMOUNT');else {\n        /**\n        * When `present` changes to `false`, we check changes to animation-name to\n        * determine whether an animation has started. We chose this approach (reading\n        * computed styles) because there is no `animationrun` event and `animationstart`\n        * fires after `animation-delay` has expired which would be too late.\n        */\n        const isAnimating = prevAnimationName !== currentAnimationName;\n        if (wasPresent && isAnimating) send('ANIMATION_OUT');else send('UNMOUNT');\n      }\n      prevPresentRef.current = present;\n    }\n  }, [present, send]);\n  $iqq3r$useLayoutEffect(() => {\n    if (node1) {\n      /**\n      * Triggering an ANIMATION_OUT during an ANIMATION_IN will fire an `animationcancel`\n      * event for ANIMATION_IN after we have entered `unmountSuspended` state. So, we\n      * make sure we only trigger ANIMATION_END for the currently active animation.\n      */\n      const handleAnimationEnd = event => {\n        const currentAnimationName = $921a889cee6df7e8$var$getAnimationName(stylesRef.current);\n        const isCurrentAnimation = currentAnimationName.includes(event.animationName);\n        if (event.target === node1 && isCurrentAnimation)\n          // With React 18 concurrency this update is applied\n          // a frame after the animation ends, creating a flash of visible content.\n          // By manually flushing we ensure they sync within a frame, removing the flash.\n          $iqq3r$flushSync(() => send('ANIMATION_END'));\n      };\n      const handleAnimationStart = event => {\n        if (event.target === node1)\n          // if animation occurred, store its name as the previous animation.\n          prevAnimationNameRef.current = $921a889cee6df7e8$var$getAnimationName(stylesRef.current);\n      };\n      node1.addEventListener('animationstart', handleAnimationStart);\n      node1.addEventListener('animationcancel', handleAnimationEnd);\n      node1.addEventListener('animationend', handleAnimationEnd);\n      return () => {\n        node1.removeEventListener('animationstart', handleAnimationStart);\n        node1.removeEventListener('animationcancel', handleAnimationEnd);\n        node1.removeEventListener('animationend', handleAnimationEnd);\n      };\n    } else\n      // Transition to the unmounted state if the node is removed prematurely.\n      // We avoid doing so during cleanup as the node may change but still exist.\n      send('ANIMATION_END');\n  }, [node1, send]);\n  return {\n    isPresent: ['mounted', 'unmountSuspended'].includes(state),\n    ref: $iqq3r$useCallback(node => {\n      if (node) stylesRef.current = getComputedStyle(node);\n      setNode(node);\n    }, [])\n  };\n}\n/* -----------------------------------------------------------------------------------------------*/\nfunction $921a889cee6df7e8$var$getAnimationName(styles) {\n  return (styles === null || styles === void 0 ? void 0 : styles.animationName) || 'none';\n}\nexport { $921a889cee6df7e8$export$99c2b779aa4e8b8b as Presence };","map":{"version":3,"sources":["C:\\Users\\Ziv\\Desktop\\Work\\ziv-react-candy-crush\\node_modules\\@radix-ui\\react-presence\\dist\\packages\\react\\presence\\src\\index.ts","C:\\Users\\Ziv\\Desktop\\Work\\ziv-react-candy-crush\\node_modules\\@radix-ui\\react-presence\\dist\\packages\\react\\presence\\src\\Presence.tsx","C:\\Users\\Ziv\\Desktop\\Work\\ziv-react-candy-crush\\node_modules\\@radix-ui\\react-presence\\dist\\packages\\react\\presence\\src\\useStateMachine.tsx"],"names":["Presence","props","present","children","presence","usePresence","child","React","only","ref","useComposedRefs","forceMount","isPresent","displayName","node","setNode","stylesRef","prevPresentRef","prevAnimationNameRef","initialState","state","send","useStateMachine","mounted","UNMOUNT","ANIMATION_OUT","unmountSuspended","MOUNT","ANIMATION_END","unmounted","currentAnimationName","getAnimationName","current","useLayoutEffect","styles","wasPresent","hasPresentChanged","prevAnimationName","display","isAnimating","handleAnimationEnd","event","isCurrentAnimation","includes","animationName","target","ReactDOM","handleAnimationStart","addEventListener","removeEventListener","getComputedStyle","machine","nextState"],"mappings":"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","sourcesContent":["export { Presence } from './Presence';\nexport type { PresenceProps } from './Presence';\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { useStateMachine } from './useStateMachine';\n\ninterface PresenceProps {\n  children: React.ReactElement | ((props: { present: boolean }) => React.ReactElement);\n  present: boolean;\n}\n\nconst Presence: React.FC<PresenceProps> = (props) => {\n  const { present, children } = props;\n  const presence = usePresence(present);\n\n  const child = (\n    typeof children === 'function'\n      ? children({ present: presence.isPresent })\n      : React.Children.only(children)\n  ) as React.ReactElement;\n\n  const ref = useComposedRefs(presence.ref, (child as any).ref);\n  const forceMount = typeof children === 'function';\n  return forceMount || presence.isPresent ? React.cloneElement(child, { ref }) : null;\n};\n\nPresence.displayName = 'Presence';\n\n/* -------------------------------------------------------------------------------------------------\n * usePresence\n * -----------------------------------------------------------------------------------------------*/\n\nfunction usePresence(present: boolean) {\n  const [node, setNode] = React.useState<HTMLElement>();\n  const stylesRef = React.useRef<CSSStyleDeclaration>({} as any);\n  const prevPresentRef = React.useRef(present);\n  const prevAnimationNameRef = React.useRef<string>('none');\n  const initialState = present ? 'mounted' : 'unmounted';\n  const [state, send] = useStateMachine(initialState, {\n    mounted: {\n      UNMOUNT: 'unmounted',\n      ANIMATION_OUT: 'unmountSuspended',\n    },\n    unmountSuspended: {\n      MOUNT: 'mounted',\n      ANIMATION_END: 'unmounted',\n    },\n    unmounted: {\n      MOUNT: 'mounted',\n    },\n  });\n\n  React.useEffect(() => {\n    const currentAnimationName = getAnimationName(stylesRef.current);\n    prevAnimationNameRef.current = state === 'mounted' ? currentAnimationName : 'none';\n  }, [state]);\n\n  useLayoutEffect(() => {\n    const styles = stylesRef.current;\n    const wasPresent = prevPresentRef.current;\n    const hasPresentChanged = wasPresent !== present;\n\n    if (hasPresentChanged) {\n      const prevAnimationName = prevAnimationNameRef.current;\n      const currentAnimationName = getAnimationName(styles);\n\n      if (present) {\n        send('MOUNT');\n      } else if (currentAnimationName === 'none' || styles?.display === 'none') {\n        // If there is no exit animation or the element is hidden, animations won't run\n        // so we unmount instantly\n        send('UNMOUNT');\n      } else {\n        /**\n         * When `present` changes to `false`, we check changes to animation-name to\n         * determine whether an animation has started. We chose this approach (reading\n         * computed styles) because there is no `animationrun` event and `animationstart`\n         * fires after `animation-delay` has expired which would be too late.\n         */\n        const isAnimating = prevAnimationName !== currentAnimationName;\n\n        if (wasPresent && isAnimating) {\n          send('ANIMATION_OUT');\n        } else {\n          send('UNMOUNT');\n        }\n      }\n\n      prevPresentRef.current = present;\n    }\n  }, [present, send]);\n\n  useLayoutEffect(() => {\n    if (node) {\n      /**\n       * Triggering an ANIMATION_OUT during an ANIMATION_IN will fire an `animationcancel`\n       * event for ANIMATION_IN after we have entered `unmountSuspended` state. So, we\n       * make sure we only trigger ANIMATION_END for the currently active animation.\n       */\n      const handleAnimationEnd = (event: AnimationEvent) => {\n        const currentAnimationName = getAnimationName(stylesRef.current);\n        const isCurrentAnimation = currentAnimationName.includes(event.animationName);\n        if (event.target === node && isCurrentAnimation) {\n          // With React 18 concurrency this update is applied\n          // a frame after the animation ends, creating a flash of visible content.\n          // By manually flushing we ensure they sync within a frame, removing the flash.\n          ReactDOM.flushSync(() => send('ANIMATION_END'));\n        }\n      };\n      const handleAnimationStart = (event: AnimationEvent) => {\n        if (event.target === node) {\n          // if animation occurred, store its name as the previous animation.\n          prevAnimationNameRef.current = getAnimationName(stylesRef.current);\n        }\n      };\n      node.addEventListener('animationstart', handleAnimationStart);\n      node.addEventListener('animationcancel', handleAnimationEnd);\n      node.addEventListener('animationend', handleAnimationEnd);\n      return () => {\n        node.removeEventListener('animationstart', handleAnimationStart);\n        node.removeEventListener('animationcancel', handleAnimationEnd);\n        node.removeEventListener('animationend', handleAnimationEnd);\n      };\n    } else {\n      // Transition to the unmounted state if the node is removed prematurely.\n      // We avoid doing so during cleanup as the node may change but still exist.\n      send('ANIMATION_END');\n    }\n  }, [node, send]);\n\n  return {\n    isPresent: ['mounted', 'unmountSuspended'].includes(state),\n    ref: React.useCallback((node: HTMLElement) => {\n      if (node) stylesRef.current = getComputedStyle(node);\n      setNode(node);\n    }, []),\n  };\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getAnimationName(styles?: CSSStyleDeclaration) {\n  return styles?.animationName || 'none';\n}\n\nexport { Presence };\nexport type { PresenceProps };\n","import * as React from 'react';\n\ntype Machine<S> = { [k: string]: { [k: string]: S } };\ntype MachineState<T> = keyof T;\ntype MachineEvent<T> = keyof UnionToIntersection<T[keyof T]>;\n\n// 🤯 https://fettblog.eu/typescript-union-to-intersection/\ntype UnionToIntersection<T> = (T extends any ? (x: T) => any : never) extends (x: infer R) => any\n  ? R\n  : never;\n\nexport function useStateMachine<M>(\n  initialState: MachineState<M>,\n  machine: M & Machine<MachineState<M>>\n) {\n  return React.useReducer((state: MachineState<M>, event: MachineEvent<M>): MachineState<M> => {\n    const nextState = (machine[state] as any)[event];\n    return nextState ?? state;\n  }, initialState);\n}\n"]},"metadata":{},"sourceType":"module"}