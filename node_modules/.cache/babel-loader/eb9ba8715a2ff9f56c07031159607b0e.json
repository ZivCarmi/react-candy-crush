{"ast":null,"code":"import { useCallback as $3vqmr$useCallback } from \"react\";\n\n/**\n * Set a given ref to a given value\n * This utility takes care of different types of refs: callback refs and RefObject(s)\n */\nfunction $6ed0406888f73fc4$var$setRef(ref, value) {\n  if (typeof ref === 'function') ref(value);else if (ref !== null && ref !== undefined) ref.current = value;\n}\n/**\n * A utility to compose multiple refs together\n * Accepts callback refs and RefObject(s)\n */\nfunction $6ed0406888f73fc4$export$43e446d32b3d21af() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n  return node => refs.forEach(ref => $6ed0406888f73fc4$var$setRef(ref, node));\n}\n/**\n * A custom hook that composes multiple refs\n * Accepts callback refs and RefObject(s)\n */\nfunction $6ed0406888f73fc4$export$c7b2cbe3552a0d05() {\n  for (var _len2 = arguments.length, refs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    refs[_key2] = arguments[_key2];\n  }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return $3vqmr$useCallback($6ed0406888f73fc4$export$43e446d32b3d21af(...refs), refs);\n}\nexport { $6ed0406888f73fc4$export$43e446d32b3d21af as composeRefs, $6ed0406888f73fc4$export$c7b2cbe3552a0d05 as useComposedRefs };","map":{"version":3,"sources":["C:\\Users\\Ziv\\Desktop\\Work\\ziv-react-candy-crush\\node_modules\\@radix-ui\\react-compose-refs\\dist\\packages\\react\\compose-refs\\src\\composeRefs.tsx"],"names":["setRef","ref","value","undefined","current","composeRefs","refs","node","forEach","useComposedRefs","React"],"mappings":";;AAIA;;;AAGA;AACA,SAASA,4BAAT,CAAmBC,GAAnB,EAAwCC,KAAxC,EAAkD;EAChD,IAAI,OAAOD,GAAP,KAAe,UAAnB,EACEA,GAAG,CAACC,KAAD,CAAHD,CAAAA,KACK,IAAIA,GAAG,KAAK,IAARA,IAAgBA,GAAG,KAAKE,SAA5B,EACJF,GAAD,CAAmCG,OAAnC,GAA6CF,KAA7C;AAEH;AAED;;;AAGA;AACA,SAASG,yCAAT,CAAA,EAAmD;EAAA,SAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAxBC,IAA3B,OAAA,KAAA,CAAA,IAAA,GAAA,IAAA,MAAA,IAAA,GAAA,IAAA,EAAA,IAAA;IAA2BA,IAA3B,CAAA,IAAA,IAAA,SAAA,CAAA,IAAA;EAAA;EACE,OAAQC,IAAD,IAAa,IAAI,CAACC,OAAL,CAAcP,GAAD,IAASD,4BAAM,CAACC,GAAD,EAAMM,IAAlC,CAAA,CAApB;AACD;AAED;;;AAGA;AACA,SAASE,yCAAT,CAAA,EAAuD;EAAA,SAAA,KAAA,GAAA,SAAA,CAAA,MAAA,EAAxBH,IAA/B,OAAA,KAAA,CAAA,KAAA,GAAA,KAAA,MAAA,KAAA,GAAA,KAAA,EAAA,KAAA;IAA+BA,IAA/B,CAAA,KAAA,IAAA,SAAA,CAAA,KAAA;EAAA;EACE;EACA,OAAOI,kBAAAA,CAAkBL,yCAAW,CAAA,GAAIC,IAAJ,CAA7BI,EAAwCJ,IAAxCI,CAAP;AACD","sourcesContent":["import * as React from 'react';\n\ntype PossibleRef<T> = React.Ref<T> | undefined;\n\n/**\n * Set a given ref to a given value\n * This utility takes care of different types of refs: callback refs and RefObject(s)\n */\nfunction setRef<T>(ref: PossibleRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref !== null && ref !== undefined) {\n    (ref as React.MutableRefObject<T>).current = value;\n  }\n}\n\n/**\n * A utility to compose multiple refs together\n * Accepts callback refs and RefObject(s)\n */\nfunction composeRefs<T>(...refs: PossibleRef<T>[]) {\n  return (node: T) => refs.forEach((ref) => setRef(ref, node));\n}\n\n/**\n * A custom hook that composes multiple refs\n * Accepts callback refs and RefObject(s)\n */\nfunction useComposedRefs<T>(...refs: PossibleRef<T>[]) {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return React.useCallback(composeRefs(...refs), refs);\n}\n\nexport { composeRefs, useComposedRefs };\n"]},"metadata":{},"sourceType":"module"}