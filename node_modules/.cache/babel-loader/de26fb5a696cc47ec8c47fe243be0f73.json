{"ast":null,"code":"/**\n * @license lucide-react v0.319.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport { forwardRef, createElement } from 'react';\nimport defaultAttributes from './defaultAttributes.js';\nconst toKebabCase = string => string.replace(/([a-z0-9])([A-Z])/g, \"$1-$2\").toLowerCase().trim();\nconst createLucideIcon = (iconName, iconNode) => {\n  const Component = forwardRef((_ref, ref) => {\n    let {\n      color = \"currentColor\",\n      size = 24,\n      strokeWidth = 2,\n      absoluteStrokeWidth,\n      className = \"\",\n      children,\n      ...rest\n    } = _ref;\n    return createElement(\"svg\", {\n      ref,\n      ...defaultAttributes,\n      width: size,\n      height: size,\n      stroke: color,\n      strokeWidth: absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size) : strokeWidth,\n      className: [\"lucide\", `lucide-${toKebabCase(iconName)}`, className].join(\" \"),\n      ...rest\n    }, [...iconNode.map(_ref2 => {\n      let [tag, attrs] = _ref2;\n      return createElement(tag, attrs);\n    }), ...(Array.isArray(children) ? children : [children])]);\n  });\n  Component.displayName = `${iconName}`;\n  return Component;\n};\nexport { createLucideIcon as default, toKebabCase };","map":{"version":3,"sources":["C:\\Users\\Ziv\\Desktop\\Work\\ziv-react-candy-crush\\node_modules\\lucide-react\\src\\createLucideIcon.ts"],"names":[],"mappings":";;;;;;;;;AA6Ba,MAAA,WAAA,GAAe,MAAA,IAC1B,MACG,CAAA,OAAA,CAAQ,oBAAA,EAAsB,OAAO,CAAA,CACrC,WAAY,CAAA,CAAA,CACZ,IAAK,CAAA,CAAA;AAEJ,MAAA,gBAAA,GAAmB,CAAC,QAAA,EAAkB,QAAmC,KAAA;EAC7E,MAAM,SAAY,GAAA,UAAA,CAChB,CAAA,IAAA,EAAiH,GAAO,KAAA;IAAA,IAAvH;MAAE,KAAQ,GAAA,cAAA;MAAgB,IAAA,GAAO,EAAI;MAAA,WAAA,GAAc,CAAG;MAAA,mBAAA;MAAqB,SAAA,GAAY,EAAI;MAAA,QAAA;MAAU,GAAG;IAAA,CAAA,GAAA,IAAA;IAEhG,OAAA,aAAA,CACL,KAAA,EACA;MACE,GAAA;MACA,GAAG,iBAAA;MACH,KAAO,EAAA,IAAA;MACP,MAAQ,EAAA,IAAA;MACR,MAAQ,EAAA,KAAA;MACR,WAAA,EAAa,mBAAA,GAAsB,MAAO,CAAA,WAAW,CAAA,GAAI,EAAK,GAAA,MAAA,CAAO,IAAI,CAAI,GAAA,WAAA;MAC7E,SAAA,EAAW,CAAC,QAAA,EAAoB,UAAA,WAAA,CAAY,QAAQ,CAAK,EAAA,EAAA,SAAS,CAAE,CAAA,IAAA,CAAK,GAAG,CAAA;MAC5E,GAAG;IACL,CAAA,EACA,CACE,GAAG,QAAS,CAAA,GAAA,CAAI,KAAA;MAAA,IAAC,CAAC,GAAK,EAAA,KAAK,CAAM,GAAA,KAAA;MAAA,OAAA,aAAA,CAAc,GAAK,EAAA,KAAK,CAAC;IAAA,EAAA,EAC3D,IAAI,KAAM,CAAA,OAAA,CAAQ,QAAQ,CAAI,GAAA,QAAA,GAAW,CAAC,QAAQ,CAAA,EACpD,CACF;EACF,CAAA,CACF;EAEU,SAAA,CAAA,WAAA,GAAc,GAAG,QAAQ,EAAA;EAE5B,OAAA,SAAA;AACT,CAAA","sourcesContent":["import {\n  forwardRef,\n  createElement,\n  ReactSVG,\n  SVGProps,\n  ForwardRefExoticComponent,\n  RefAttributes,\n} from 'react';\nimport defaultAttributes from './defaultAttributes';\n\nexport type IconNode = [elementName: keyof ReactSVG, attrs: Record<string, string>][];\n\nexport type SVGAttributes = Partial<SVGProps<SVGSVGElement>>;\ntype ComponentAttributes = RefAttributes<SVGSVGElement> & SVGAttributes;\n\nexport interface LucideProps extends ComponentAttributes {\n  size?: string | number;\n  absoluteStrokeWidth?: boolean;\n}\n\nexport type LucideIcon = ForwardRefExoticComponent<LucideProps>;\n/**\n * Converts string to KebabCase\n * Copied from scripts/helper. If anyone knows how to properly import it here\n * then please fix it.\n *\n * @param {string} string\n * @returns {string} A kebabized string\n */\nexport const toKebabCase = (string: string) =>\n  string\n    .replace(/([a-z0-9])([A-Z])/g, '$1-$2')\n    .toLowerCase()\n    .trim();\n\nconst createLucideIcon = (iconName: string, iconNode: IconNode): LucideIcon => {\n  const Component = forwardRef<SVGSVGElement, LucideProps>(\n    ({ color = 'currentColor', size = 24, strokeWidth = 2, absoluteStrokeWidth, className = '', children, ...rest }, ref) =>{\n\n      return createElement(\n        'svg',\n        {\n          ref,\n          ...defaultAttributes,\n          width: size,\n          height: size,\n          stroke: color,\n          strokeWidth: absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size) : strokeWidth,\n          className: ['lucide', `lucide-${toKebabCase(iconName)}`, className].join(' '),\n          ...rest,\n        },\n        [\n          ...iconNode.map(([tag, attrs]) => createElement(tag, attrs)),\n          ...(Array.isArray(children) ? children : [children]),\n        ]\n      )\n    }\n  );\n\n  Component.displayName = `${iconName}`;\n\n  return Component;\n};\n\nexport default createLucideIcon;\n"]},"metadata":{},"sourceType":"module"}