{"ast":null,"code":"import { useEffect as $hPSQ5$useEffect } from \"react\";\nimport { useCallbackRef as $hPSQ5$useCallbackRef } from \"@radix-ui/react-use-callback-ref\";\n\n/**\n * Listens for when the escape key is down\n */\nfunction $addc16e1bbe58fd0$export$3a72a57244d6e765(onEscapeKeyDownProp) {\n  let ownerDocument = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : globalThis === null || globalThis === void 0 ? void 0 : globalThis.document;\n  const onEscapeKeyDown = $hPSQ5$useCallbackRef(onEscapeKeyDownProp);\n  $hPSQ5$useEffect(() => {\n    const handleKeyDown = event => {\n      if (event.key === 'Escape') onEscapeKeyDown(event);\n    };\n    ownerDocument.addEventListener('keydown', handleKeyDown);\n    return () => ownerDocument.removeEventListener('keydown', handleKeyDown);\n  }, [onEscapeKeyDown, ownerDocument]);\n}\nexport { $addc16e1bbe58fd0$export$3a72a57244d6e765 as useEscapeKeydown };","map":{"version":3,"sources":["C:\\Users\\Ziv\\Desktop\\Work\\ziv-react-candy-crush\\node_modules\\@radix-ui\\react-use-escape-keydown\\dist\\packages\\react\\use-escape-keydown\\src\\useEscapeKeydown.tsx"],"names":["useEscapeKeydown","onEscapeKeyDownProp","ownerDocument","globalThis","document","onEscapeKeyDown","useCallbackRef","React","handleKeyDown","event","key","addEventListener","removeEventListener"],"mappings":";;;AAGA;;AAEA;AACA,SAASA,yCAAT,CACEC,mBADF,EAGE;EAAA,IADAC,aAAuB,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAGC,UAAH,KAAA,IAAA,IAAGA,UAAH,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGA,UAAU,CAAEC,QAFxC;EAIE,MAAMC,eAAe,GAAGC,qBAAc,CAACL,mBAAD,CAAtC;EAEAM,gBAAAA,CAAgB,MAAM;IACpB,MAAMC,aAAa,GAAIC,KAAD,IAA0B;MAC9C,IAAIA,KAAK,CAACC,GAAND,KAAc,QAAlB,EACEJ,eAAe,CAACI,KAAD,CAAfJ;KAEH;IACDH,aAAa,CAACS,gBAAdT,CAA+B,SAA/BA,EAA0CM,aAA1CN,CAAAA;IACA,OAAO,MAAMA,aAAa,CAACU,mBAAdV,CAAkC,SAAlCA,EAA6CM,aAA7CN,CAAb;GAPFK,EAQG,CAACF,eAAD,EAAkBH,aAAlB,CARHK,CAQC;AACF","sourcesContent":["import * as React from 'react';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\n\n/**\n * Listens for when the escape key is down\n */\nfunction useEscapeKeydown(\n  onEscapeKeyDownProp?: (event: KeyboardEvent) => void,\n  ownerDocument: Document = globalThis?.document\n) {\n  const onEscapeKeyDown = useCallbackRef(onEscapeKeyDownProp);\n\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === 'Escape') {\n        onEscapeKeyDown(event);\n      }\n    };\n    ownerDocument.addEventListener('keydown', handleKeyDown);\n    return () => ownerDocument.removeEventListener('keydown', handleKeyDown);\n  }, [onEscapeKeyDown, ownerDocument]);\n}\n\nexport { useEscapeKeydown };\n"]},"metadata":{},"sourceType":"module"}