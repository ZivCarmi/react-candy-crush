{"ast":null,"code":"import { createContext as $3bkAK$createContext, useMemo as $3bkAK$useMemo, createElement as $3bkAK$createElement, useContext as $3bkAK$useContext } from \"react\";\nfunction $c512c27ab02ef895$export$fd42f52fd3ae1109(rootComponentName, defaultContext) {\n  const Context = /*#__PURE__*/$3bkAK$createContext(defaultContext);\n  function Provider(props) {\n    const {\n      children: children,\n      ...context\n    } = props; // Only re-memoize when prop values change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const value = $3bkAK$useMemo(() => context, Object.values(context));\n    return /*#__PURE__*/$3bkAK$createElement(Context.Provider, {\n      value: value\n    }, children);\n  }\n  function useContext(consumerName) {\n    const context = $3bkAK$useContext(Context);\n    if (context) return context;\n    if (defaultContext !== undefined) return defaultContext; // if a defaultContext wasn't specified, it's a required context.\n    throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n  }\n  Provider.displayName = rootComponentName + 'Provider';\n  return [Provider, useContext];\n}\n/* -------------------------------------------------------------------------------------------------\n * createContextScope\n * -----------------------------------------------------------------------------------------------*/\nfunction $c512c27ab02ef895$export$50c7b4e9d9f19c1(scopeName) {\n  let createContextScopeDeps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let defaultContexts = [];\n  /* -----------------------------------------------------------------------------------------------\n  * createContext\n  * ---------------------------------------------------------------------------------------------*/\n  function $c512c27ab02ef895$export$fd42f52fd3ae1109(rootComponentName, defaultContext) {\n    const BaseContext = /*#__PURE__*/$3bkAK$createContext(defaultContext);\n    const index = defaultContexts.length;\n    defaultContexts = [...defaultContexts, defaultContext];\n    function Provider(props) {\n      const {\n        scope: scope,\n        children: children,\n        ...context\n      } = props;\n      const Context = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index]) || BaseContext; // Only re-memoize when prop values change\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const value = $3bkAK$useMemo(() => context, Object.values(context));\n      return /*#__PURE__*/$3bkAK$createElement(Context.Provider, {\n        value: value\n      }, children);\n    }\n    function useContext(consumerName, scope) {\n      const Context = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index]) || BaseContext;\n      const context = $3bkAK$useContext(Context);\n      if (context) return context;\n      if (defaultContext !== undefined) return defaultContext; // if a defaultContext wasn't specified, it's a required context.\n      throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n    }\n    Provider.displayName = rootComponentName + 'Provider';\n    return [Provider, useContext];\n  }\n  /* -----------------------------------------------------------------------------------------------\n  * createScope\n  * ---------------------------------------------------------------------------------------------*/\n  const createScope = () => {\n    const scopeContexts = defaultContexts.map(defaultContext => {\n      return /*#__PURE__*/$3bkAK$createContext(defaultContext);\n    });\n    return function useScope(scope) {\n      const contexts = (scope === null || scope === void 0 ? void 0 : scope[scopeName]) || scopeContexts;\n      return $3bkAK$useMemo(() => ({\n        [`__scope${scopeName}`]: {\n          ...scope,\n          [scopeName]: contexts\n        }\n      }), [scope, contexts]);\n    };\n  };\n  createScope.scopeName = scopeName;\n  return [$c512c27ab02ef895$export$fd42f52fd3ae1109, $c512c27ab02ef895$var$composeContextScopes(createScope, ...createContextScopeDeps)];\n}\n/* -------------------------------------------------------------------------------------------------\n * composeContextScopes\n * -----------------------------------------------------------------------------------------------*/\nfunction $c512c27ab02ef895$var$composeContextScopes() {\n  for (var _len = arguments.length, scopes = new Array(_len), _key = 0; _key < _len; _key++) {\n    scopes[_key] = arguments[_key];\n  }\n  const baseScope = scopes[0];\n  if (scopes.length === 1) return baseScope;\n  const createScope1 = () => {\n    const scopeHooks = scopes.map(createScope => ({\n      useScope: createScope(),\n      scopeName: createScope.scopeName\n    }));\n    return function useComposedScopes(overrideScopes) {\n      const nextScopes1 = scopeHooks.reduce((nextScopes, _ref) => {\n        let {\n          useScope: useScope,\n          scopeName: scopeName\n        } = _ref;\n        // We are calling a hook inside a callback which React warns against to avoid inconsistent\n        // renders, however, scoping doesn't have render side effects so we ignore the rule.\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const scopeProps = useScope(overrideScopes);\n        const currentScope = scopeProps[`__scope${scopeName}`];\n        return {\n          ...nextScopes,\n          ...currentScope\n        };\n      }, {});\n      return $3bkAK$useMemo(() => ({\n        [`__scope${baseScope.scopeName}`]: nextScopes1\n      }), [nextScopes1]);\n    };\n  };\n  createScope1.scopeName = baseScope.scopeName;\n  return createScope1;\n}\nexport { $c512c27ab02ef895$export$fd42f52fd3ae1109 as createContext, $c512c27ab02ef895$export$50c7b4e9d9f19c1 as createContextScope };","map":{"version":3,"sources":["C:\\Users\\Ziv\\Desktop\\Work\\ziv-react-candy-crush\\node_modules\\@radix-ui\\react-context\\dist\\packages\\react\\context\\src\\index.ts","C:\\Users\\Ziv\\Desktop\\Work\\ziv-react-candy-crush\\node_modules\\@radix-ui\\react-context\\dist\\packages\\react\\context\\src\\createContext.tsx"],"names":["createContext","rootComponentName","defaultContext","Context","React","Provider","props","children","value","context","Object","values","useContext","consumerName","undefined","Error","displayName","createContextScope","scopeName","createContextScopeDeps","defaultContexts","BaseContext","index","length","scope","createScope","scopeContexts","map","useScope","contexts","composeContextScopes","scopes","baseScope","scopeHooks","useComposedScopes","overrideScopes","nextScopes","reduce","scopeProps","currentScope"],"mappings":"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","sourcesContent":["export { createContext, createContextScope } from './createContext';\nexport type { CreateScope, Scope } from './createContext';\n","import * as React from 'react';\n\nfunction createContext<ContextValueType extends object | null>(\n  rootComponentName: string,\n  defaultContext?: ContextValueType\n) {\n  const Context = React.createContext<ContextValueType | undefined>(defaultContext);\n\n  function Provider(props: ContextValueType & { children: React.ReactNode }) {\n    const { children, ...context } = props;\n    // Only re-memoize when prop values change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const value = React.useMemo(() => context, Object.values(context)) as ContextValueType;\n    return <Context.Provider value={value}>{children}</Context.Provider>;\n  }\n\n  function useContext(consumerName: string) {\n    const context = React.useContext(Context);\n    if (context) return context;\n    if (defaultContext !== undefined) return defaultContext;\n    // if a defaultContext wasn't specified, it's a required context.\n    throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n  }\n\n  Provider.displayName = rootComponentName + 'Provider';\n  return [Provider, useContext] as const;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * createContextScope\n * -----------------------------------------------------------------------------------------------*/\n\ntype Scope<C = any> = { [scopeName: string]: React.Context<C>[] } | undefined;\ntype ScopeHook = (scope: Scope) => { [__scopeProp: string]: Scope };\ninterface CreateScope {\n  scopeName: string;\n  (): ScopeHook;\n}\n\nfunction createContextScope(scopeName: string, createContextScopeDeps: CreateScope[] = []) {\n  let defaultContexts: any[] = [];\n\n  /* -----------------------------------------------------------------------------------------------\n   * createContext\n   * ---------------------------------------------------------------------------------------------*/\n\n  function createContext<ContextValueType extends object | null>(\n    rootComponentName: string,\n    defaultContext?: ContextValueType\n  ) {\n    const BaseContext = React.createContext<ContextValueType | undefined>(defaultContext);\n    const index = defaultContexts.length;\n    defaultContexts = [...defaultContexts, defaultContext];\n\n    function Provider(\n      props: ContextValueType & { scope: Scope<ContextValueType>; children: React.ReactNode }\n    ) {\n      const { scope, children, ...context } = props;\n      const Context = scope?.[scopeName][index] || BaseContext;\n      // Only re-memoize when prop values change\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      const value = React.useMemo(() => context, Object.values(context)) as ContextValueType;\n      return <Context.Provider value={value}>{children}</Context.Provider>;\n    }\n\n    function useContext(consumerName: string, scope: Scope<ContextValueType | undefined>) {\n      const Context = scope?.[scopeName][index] || BaseContext;\n      const context = React.useContext(Context);\n      if (context) return context;\n      if (defaultContext !== undefined) return defaultContext;\n      // if a defaultContext wasn't specified, it's a required context.\n      throw new Error(`\\`${consumerName}\\` must be used within \\`${rootComponentName}\\``);\n    }\n\n    Provider.displayName = rootComponentName + 'Provider';\n    return [Provider, useContext] as const;\n  }\n\n  /* -----------------------------------------------------------------------------------------------\n   * createScope\n   * ---------------------------------------------------------------------------------------------*/\n\n  const createScope: CreateScope = () => {\n    const scopeContexts = defaultContexts.map((defaultContext) => {\n      return React.createContext(defaultContext);\n    });\n    return function useScope(scope: Scope) {\n      const contexts = scope?.[scopeName] || scopeContexts;\n      return React.useMemo(\n        () => ({ [`__scope${scopeName}`]: { ...scope, [scopeName]: contexts } }),\n        [scope, contexts]\n      );\n    };\n  };\n\n  createScope.scopeName = scopeName;\n  return [createContext, composeContextScopes(createScope, ...createContextScopeDeps)] as const;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * composeContextScopes\n * -----------------------------------------------------------------------------------------------*/\n\nfunction composeContextScopes(...scopes: CreateScope[]) {\n  const baseScope = scopes[0];\n  if (scopes.length === 1) return baseScope;\n\n  const createScope: CreateScope = () => {\n    const scopeHooks = scopes.map((createScope) => ({\n      useScope: createScope(),\n      scopeName: createScope.scopeName,\n    }));\n\n    return function useComposedScopes(overrideScopes) {\n      const nextScopes = scopeHooks.reduce((nextScopes, { useScope, scopeName }) => {\n        // We are calling a hook inside a callback which React warns against to avoid inconsistent\n        // renders, however, scoping doesn't have render side effects so we ignore the rule.\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        const scopeProps = useScope(overrideScopes);\n        const currentScope = scopeProps[`__scope${scopeName}`];\n        return { ...nextScopes, ...currentScope };\n      }, {});\n\n      return React.useMemo(() => ({ [`__scope${baseScope.scopeName}`]: nextScopes }), [nextScopes]);\n    };\n  };\n\n  createScope.scopeName = baseScope.scopeName;\n  return createScope;\n}\n\n/* -----------------------------------------------------------------------------------------------*/\n\nexport { createContext, createContextScope };\nexport type { CreateScope, Scope };\n"]},"metadata":{},"sourceType":"module"}