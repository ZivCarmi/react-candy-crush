{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ziv\\\\Desktop\\\\Work\\\\ziv-react-candy-crush\\\\src\\\\components\\\\Board.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport Blank from \"../images/blank.png\";\nimport { width, candyColors, firstRowIndexes } from \"../lib/constants\";\nimport Hints from \"./Hints\";\nimport { useScore } from \"./ScoreProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board() {\n  _s();\n  const [board, setBoard] = useState([]);\n  const [draggedCandy, setDraggedCandy] = useState(null);\n  const [candyToBeSwitch, setCandyToBeSwitch] = useState(null);\n  const {\n    score,\n    setScore\n  } = useScore();\n  const [isHintClicked, setIsHintClicked] = useState(false);\n  const [cursor, setCursor] = useState(null);\n  const [candyToHammer, setCandyToHammer] = useState(null);\n  const createBoard = () => {\n    const randomBoard = [];\n    for (let i = 0; i < width * width; i++) {\n      randomBoard.push(candyColors[Math.floor(Math.random() * candyColors.length)]);\n    }\n    setBoard(randomBoard);\n  };\n  const checkForColumnOfFive = () => {\n    for (let i = 0; i < width * width - width * 4; i++) {\n      const candiesToCheck = [i, i + width, i + width * 2, i + width * 3, i + width * 4];\n      const colorToBeCheck = board[i];\n      const isBlank = board[i] === Blank;\n      if (candiesToCheck.every(candyToCheck => board[candyToCheck] === colorToBeCheck) && !isBlank) {\n        candiesToCheck.forEach(candyToCheck => board[candyToCheck] = Blank);\n        setScore(score + 5);\n        return true;\n      }\n    }\n  };\n  const checkForRowOfFive = () => {\n    for (let i = 0; i < width * width - 4; i++) {\n      const candiesToPassCheck = [4, 5, 6, 7, 12, 13, 14, 15, 20, 21, 22, 23, 28, 29, 30, 31, 36, 37, 38, 39, 44, 45, 46, 47, 52, 53, 54, 55];\n      if (candiesToPassCheck.includes(i)) continue;\n      const candiesToCheck = [i, i + 1, i + 2, i + 3, i + 4];\n      const colorToBeCheck = board[i];\n      const isBlank = board[i] === Blank;\n      if (candiesToCheck.every(candyToCheck => board[candyToCheck] === colorToBeCheck) && !isBlank) {\n        candiesToCheck.forEach(candyToCheck => board[candyToCheck] = Blank);\n        setScore(score + 5);\n        return true;\n      }\n    }\n  };\n  const checkForColumnOfFour = () => {\n    for (let i = 0; i < width * width - width * 3; i++) {\n      const candiesToCheck = [i, i + width, i + width * 2, i + width * 3];\n      const colorToBeCheck = board[i];\n      const isBlank = board[i] === Blank;\n      if (candiesToCheck.every(candyToCheck => board[candyToCheck] === colorToBeCheck) && !isBlank) {\n        candiesToCheck.forEach(candyToCheck => board[candyToCheck] = Blank);\n        setScore(score + 4);\n        return true;\n      }\n    }\n  };\n  const checkForRowOfFour = () => {\n    for (let i = 0; i < width * width - 3; i++) {\n      const candiesToPassCheck = [5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53, 54, 55];\n      if (candiesToPassCheck.includes(i)) continue;\n      const candiesToCheck = [i, i + 1, i + 2, i + 3];\n      const colorToBeCheck = board[i];\n      const isBlank = board[i] === Blank;\n      if (candiesToCheck.every(candyToCheck => board[candyToCheck] === colorToBeCheck) && !isBlank) {\n        candiesToCheck.forEach(candyToCheck => board[candyToCheck] = Blank);\n        setScore(score + 4);\n        return true;\n      }\n    }\n  };\n  const checkForColumnOfThree = () => {\n    for (let i = 0; i < width * width - width * 2; i++) {\n      const candiesToCheck = [i, i + width, i + width * 2];\n      const colorToBeCheck = board[i];\n      const isBlank = board[i] === Blank;\n      if (candiesToCheck.every(candyToCheck => board[candyToCheck] === colorToBeCheck) && !isBlank) {\n        candiesToCheck.forEach(candyToCheck => board[candyToCheck] = Blank);\n        setScore(score + 3);\n        return true;\n      }\n    }\n  };\n  const checkForRowOfThree = () => {\n    for (let i = 0; i < width * width - 2; i++) {\n      // need to rethink that array to be dynamic\n      const candiesToPassCheck = [6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55];\n      if (candiesToPassCheck.includes(i)) continue;\n      const candiesToCheck = [i, i + 1, i + 2];\n      const colorToBeCheck = board[i];\n      const isBlank = board[i] === Blank;\n      if (candiesToCheck.every(candyToCheck => board[candyToCheck] === colorToBeCheck) && !isBlank) {\n        candiesToCheck.forEach(candyToCheck => board[candyToCheck] = Blank);\n        setScore(score + 3);\n        return true;\n      }\n    }\n  };\n  const moveDownASquare = () => {\n    for (let i = board.length - 1; i >= 0; i--) {\n      // generate random candy into blank squares\n      if (firstRowIndexes.includes(i) && board[i] === Blank) {\n        board[i] = candyColors[Math.floor(Math.random() * candyColors.length)];\n      }\n\n      // move candy to square below\n      if (board[i] === Blank) {\n        board[i] = board[i - width];\n        board[i - width] = Blank;\n      }\n    }\n  };\n  const onDragStart = e => {\n    setDraggedCandy(e.target);\n  };\n  const onDragDrop = e => {\n    setCandyToBeSwitch(e.target);\n  };\n  const onDragEnd = () => {\n    if (draggedCandy && candyToBeSwitch) {\n      const candyBeingDraggedIndex = parseInt(draggedCandy.getAttribute(\"data-index\"));\n      const candyBeingReplacedIndex = parseInt(candyToBeSwitch.getAttribute(\"data-index\"));\n      const validMoves = [candyBeingDraggedIndex - width, candyBeingDraggedIndex + 1, candyBeingDraggedIndex + width, candyBeingDraggedIndex - 1];\n      const isValidMove = validMoves.includes(candyBeingReplacedIndex);\n      if (isValidMove) {\n        board[candyBeingDraggedIndex] = candyToBeSwitch.getAttribute(\"src\");\n        board[candyBeingReplacedIndex] = draggedCandy.getAttribute(\"src\");\n        const isAColumnOfFive = checkForColumnOfFive();\n        const isARowOfFive = checkForRowOfFive();\n        const isAColumnOfFour = checkForColumnOfFour();\n        const isARowOfFour = checkForRowOfFour();\n        const isAColumnOfThree = checkForColumnOfThree();\n        const isARowOfThree = checkForRowOfThree();\n        if (candyToBeSwitch && (isAColumnOfFive || isARowOfFive || isAColumnOfFour || isARowOfFour || isAColumnOfThree || isARowOfThree)) {\n          setDraggedCandy(null);\n          setCandyToBeSwitch(null);\n        } else {\n          board[candyBeingDraggedIndex] = draggedCandy.getAttribute(\"src\");\n          board[candyBeingReplacedIndex] = candyToBeSwitch.getAttribute(\"src\");\n          setBoard([...board]);\n        }\n      }\n    }\n  };\n  const setCandyToHammerTarget = e => {\n    setCandyToHammer(e.target);\n  };\n  useEffect(() => {\n    createBoard();\n  }, []);\n  useEffect(() => {\n    const timer = setInterval(() => {\n      checkForColumnOfFive();\n      checkForRowOfFive();\n      checkForColumnOfFour();\n      checkForRowOfFour();\n      checkForColumnOfThree();\n      checkForRowOfThree();\n      moveDownASquare();\n      setBoard([...board]);\n    }, 200);\n    return () => clearInterval(timer);\n  }, [checkForColumnOfFive, checkForRowOfFive, checkForColumnOfFour, checkForRowOfFour, checkForColumnOfThree, checkForRowOfThree, moveDownASquare, board]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `board-container${cursor ? \" custom-cursor\" : \"\"}`,\n    style: {\n      cursor: cursor ? `${cursor}, auto` : \"\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: board.map((candy, index) => {\n        return /*#__PURE__*/_jsxDEV(\"img\", {\n          src: candy,\n          alt: \"\",\n          className: \"candy\",\n          \"data-index\": index,\n          draggable: \"true\",\n          onDragStart: onDragStart,\n          onDrop: onDragDrop,\n          onDragOver: e => e.preventDefault(),\n          onDragEnter: e => e.preventDefault(),\n          onDragLeave: e => e.preventDefault(),\n          onDragEnd: onDragEnd,\n          onClick: isHintClicked ? setCandyToHammerTarget : null\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Hints, {\n      boardState: {\n        board,\n        setBoard\n      },\n      cursorState: {\n        cursor,\n        setCursor\n      },\n      isHintClickedState: {\n        isHintClicked,\n        setIsHintClicked\n      },\n      candyToHammerState: {\n        candyToHammer,\n        setCandyToHammer\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 272,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"X/bw6SqehAKlx9cL4/aWOadfzO0=\", false, function () {\n  return [useScore];\n});\n_c = Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useEffect","useState","Blank","width","candyColors","firstRowIndexes","Hints","useScore","jsxDEV","_jsxDEV","Board","_s","board","setBoard","draggedCandy","setDraggedCandy","candyToBeSwitch","setCandyToBeSwitch","score","setScore","isHintClicked","setIsHintClicked","cursor","setCursor","candyToHammer","setCandyToHammer","createBoard","randomBoard","i","push","Math","floor","random","length","checkForColumnOfFive","candiesToCheck","colorToBeCheck","isBlank","every","candyToCheck","forEach","checkForRowOfFive","candiesToPassCheck","includes","checkForColumnOfFour","checkForRowOfFour","checkForColumnOfThree","checkForRowOfThree","moveDownASquare","onDragStart","e","target","onDragDrop","onDragEnd","candyBeingDraggedIndex","parseInt","getAttribute","candyBeingReplacedIndex","validMoves","isValidMove","isAColumnOfFive","isARowOfFive","isAColumnOfFour","isARowOfFour","isAColumnOfThree","isARowOfThree","setCandyToHammerTarget","timer","setInterval","clearInterval","className","style","children","map","candy","index","src","alt","draggable","onDrop","onDragOver","preventDefault","onDragEnter","onDragLeave","onClick","fileName","_jsxFileName","lineNumber","columnNumber","boardState","cursorState","isHintClickedState","candyToHammerState","_c","$RefreshReg$"],"sources":["C:/Users/Ziv/Desktop/Work/ziv-react-candy-crush/src/components/Board.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport Blank from \"../images/blank.png\";\r\nimport { width, candyColors, firstRowIndexes } from \"../lib/constants\";\r\nimport Hints from \"./Hints\";\r\nimport { useScore } from \"./ScoreProvider\";\r\n\r\nexport default function Board() {\r\n  const [board, setBoard] = useState([]);\r\n  const [draggedCandy, setDraggedCandy] = useState(null);\r\n  const [candyToBeSwitch, setCandyToBeSwitch] = useState(null);\r\n  const { score, setScore } = useScore();\r\n  const [isHintClicked, setIsHintClicked] = useState(false);\r\n  const [cursor, setCursor] = useState(null);\r\n  const [candyToHammer, setCandyToHammer] = useState(null);\r\n\r\n  const createBoard = () => {\r\n    const randomBoard = [];\r\n    for (let i = 0; i < width * width; i++) {\r\n      randomBoard.push(\r\n        candyColors[Math.floor(Math.random() * candyColors.length)]\r\n      );\r\n    }\r\n\r\n    setBoard(randomBoard);\r\n  };\r\n\r\n  const checkForColumnOfFive = () => {\r\n    for (let i = 0; i < width * width - width * 4; i++) {\r\n      const candiesToCheck = [\r\n        i,\r\n        i + width,\r\n        i + width * 2,\r\n        i + width * 3,\r\n        i + width * 4,\r\n      ];\r\n      const colorToBeCheck = board[i];\r\n      const isBlank = board[i] === Blank;\r\n\r\n      if (\r\n        candiesToCheck.every(\r\n          (candyToCheck) => board[candyToCheck] === colorToBeCheck\r\n        ) &&\r\n        !isBlank\r\n      ) {\r\n        candiesToCheck.forEach((candyToCheck) => (board[candyToCheck] = Blank));\r\n        setScore(score + 5);\r\n        return true;\r\n      }\r\n    }\r\n  };\r\n\r\n  const checkForRowOfFive = () => {\r\n    for (let i = 0; i < width * width - 4; i++) {\r\n      const candiesToPassCheck = [\r\n        4, 5, 6, 7, 12, 13, 14, 15, 20, 21, 22, 23, 28, 29, 30, 31, 36, 37, 38,\r\n        39, 44, 45, 46, 47, 52, 53, 54, 55,\r\n      ];\r\n\r\n      if (candiesToPassCheck.includes(i)) continue;\r\n\r\n      const candiesToCheck = [i, i + 1, i + 2, i + 3, i + 4];\r\n      const colorToBeCheck = board[i];\r\n      const isBlank = board[i] === Blank;\r\n\r\n      if (\r\n        candiesToCheck.every(\r\n          (candyToCheck) => board[candyToCheck] === colorToBeCheck\r\n        ) &&\r\n        !isBlank\r\n      ) {\r\n        candiesToCheck.forEach((candyToCheck) => (board[candyToCheck] = Blank));\r\n        setScore(score + 5);\r\n        return true;\r\n      }\r\n    }\r\n  };\r\n\r\n  const checkForColumnOfFour = () => {\r\n    for (let i = 0; i < width * width - width * 3; i++) {\r\n      const candiesToCheck = [i, i + width, i + width * 2, i + width * 3];\r\n      const colorToBeCheck = board[i];\r\n      const isBlank = board[i] === Blank;\r\n\r\n      if (\r\n        candiesToCheck.every(\r\n          (candyToCheck) => board[candyToCheck] === colorToBeCheck\r\n        ) &&\r\n        !isBlank\r\n      ) {\r\n        candiesToCheck.forEach((candyToCheck) => (board[candyToCheck] = Blank));\r\n        setScore(score + 4);\r\n        return true;\r\n      }\r\n    }\r\n  };\r\n\r\n  const checkForRowOfFour = () => {\r\n    for (let i = 0; i < width * width - 3; i++) {\r\n      const candiesToPassCheck = [\r\n        5, 6, 7, 13, 14, 15, 21, 22, 23, 29, 30, 31, 37, 38, 39, 45, 46, 47, 53,\r\n        54, 55,\r\n      ];\r\n\r\n      if (candiesToPassCheck.includes(i)) continue;\r\n\r\n      const candiesToCheck = [i, i + 1, i + 2, i + 3];\r\n      const colorToBeCheck = board[i];\r\n      const isBlank = board[i] === Blank;\r\n\r\n      if (\r\n        candiesToCheck.every(\r\n          (candyToCheck) => board[candyToCheck] === colorToBeCheck\r\n        ) &&\r\n        !isBlank\r\n      ) {\r\n        candiesToCheck.forEach((candyToCheck) => (board[candyToCheck] = Blank));\r\n        setScore(score + 4);\r\n        return true;\r\n      }\r\n    }\r\n  };\r\n\r\n  const checkForColumnOfThree = () => {\r\n    for (let i = 0; i < width * width - width * 2; i++) {\r\n      const candiesToCheck = [i, i + width, i + width * 2];\r\n      const colorToBeCheck = board[i];\r\n      const isBlank = board[i] === Blank;\r\n\r\n      if (\r\n        candiesToCheck.every(\r\n          (candyToCheck) => board[candyToCheck] === colorToBeCheck\r\n        ) &&\r\n        !isBlank\r\n      ) {\r\n        candiesToCheck.forEach((candyToCheck) => (board[candyToCheck] = Blank));\r\n        setScore(score + 3);\r\n        return true;\r\n      }\r\n    }\r\n  };\r\n\r\n  const checkForRowOfThree = () => {\r\n    for (let i = 0; i < width * width - 2; i++) {\r\n      // need to rethink that array to be dynamic\r\n      const candiesToPassCheck = [\r\n        6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55,\r\n      ];\r\n\r\n      if (candiesToPassCheck.includes(i)) continue;\r\n\r\n      const candiesToCheck = [i, i + 1, i + 2];\r\n      const colorToBeCheck = board[i];\r\n      const isBlank = board[i] === Blank;\r\n\r\n      if (\r\n        candiesToCheck.every(\r\n          (candyToCheck) => board[candyToCheck] === colorToBeCheck\r\n        ) &&\r\n        !isBlank\r\n      ) {\r\n        candiesToCheck.forEach((candyToCheck) => (board[candyToCheck] = Blank));\r\n        setScore(score + 3);\r\n        return true;\r\n      }\r\n    }\r\n  };\r\n\r\n  const moveDownASquare = () => {\r\n    for (let i = board.length - 1; i >= 0; i--) {\r\n      // generate random candy into blank squares\r\n      if (firstRowIndexes.includes(i) && board[i] === Blank) {\r\n        board[i] = candyColors[Math.floor(Math.random() * candyColors.length)];\r\n      }\r\n\r\n      // move candy to square below\r\n      if (board[i] === Blank) {\r\n        board[i] = board[i - width];\r\n        board[i - width] = Blank;\r\n      }\r\n    }\r\n  };\r\n\r\n  const onDragStart = (e) => {\r\n    setDraggedCandy(e.target);\r\n  };\r\n\r\n  const onDragDrop = (e) => {\r\n    setCandyToBeSwitch(e.target);\r\n  };\r\n\r\n  const onDragEnd = () => {\r\n    if (draggedCandy && candyToBeSwitch) {\r\n      const candyBeingDraggedIndex = parseInt(\r\n        draggedCandy.getAttribute(\"data-index\")\r\n      );\r\n      const candyBeingReplacedIndex = parseInt(\r\n        candyToBeSwitch.getAttribute(\"data-index\")\r\n      );\r\n\r\n      const validMoves = [\r\n        candyBeingDraggedIndex - width,\r\n        candyBeingDraggedIndex + 1,\r\n        candyBeingDraggedIndex + width,\r\n        candyBeingDraggedIndex - 1,\r\n      ];\r\n      const isValidMove = validMoves.includes(candyBeingReplacedIndex);\r\n\r\n      if (isValidMove) {\r\n        board[candyBeingDraggedIndex] = candyToBeSwitch.getAttribute(\"src\");\r\n        board[candyBeingReplacedIndex] = draggedCandy.getAttribute(\"src\");\r\n\r\n        const isAColumnOfFive = checkForColumnOfFive();\r\n        const isARowOfFive = checkForRowOfFive();\r\n        const isAColumnOfFour = checkForColumnOfFour();\r\n        const isARowOfFour = checkForRowOfFour();\r\n        const isAColumnOfThree = checkForColumnOfThree();\r\n        const isARowOfThree = checkForRowOfThree();\r\n\r\n        if (\r\n          candyToBeSwitch &&\r\n          (isAColumnOfFive ||\r\n            isARowOfFive ||\r\n            isAColumnOfFour ||\r\n            isARowOfFour ||\r\n            isAColumnOfThree ||\r\n            isARowOfThree)\r\n        ) {\r\n          setDraggedCandy(null);\r\n          setCandyToBeSwitch(null);\r\n        } else {\r\n          board[candyBeingDraggedIndex] = draggedCandy.getAttribute(\"src\");\r\n          board[candyBeingReplacedIndex] = candyToBeSwitch.getAttribute(\"src\");\r\n          setBoard([...board]);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const setCandyToHammerTarget = (e) => {\r\n    setCandyToHammer(e.target);\r\n  };\r\n\r\n  useEffect(() => {\r\n    createBoard();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      checkForColumnOfFive();\r\n      checkForRowOfFive();\r\n      checkForColumnOfFour();\r\n      checkForRowOfFour();\r\n      checkForColumnOfThree();\r\n      checkForRowOfThree();\r\n      moveDownASquare();\r\n      setBoard([...board]);\r\n    }, 200);\r\n\r\n    return () => clearInterval(timer);\r\n  }, [\r\n    checkForColumnOfFive,\r\n    checkForRowOfFive,\r\n    checkForColumnOfFour,\r\n    checkForRowOfFour,\r\n    checkForColumnOfThree,\r\n    checkForRowOfThree,\r\n    moveDownASquare,\r\n    board,\r\n  ]);\r\n\r\n  return (\r\n    <div\r\n      className={`board-container${cursor ? \" custom-cursor\" : \"\"}`}\r\n      style={{ cursor: cursor ? `${cursor}, auto` : \"\" }}\r\n    >\r\n      <div className=\"board\">\r\n        {board.map((candy, index) => {\r\n          return (\r\n            <img\r\n              src={candy}\r\n              alt=\"\"\r\n              className=\"candy\"\r\n              data-index={index}\r\n              key={index}\r\n              draggable=\"true\"\r\n              onDragStart={onDragStart}\r\n              onDrop={onDragDrop}\r\n              onDragOver={(e) => e.preventDefault()}\r\n              onDragEnter={(e) => e.preventDefault()}\r\n              onDragLeave={(e) => e.preventDefault()}\r\n              onDragEnd={onDragEnd}\r\n              onClick={isHintClicked ? setCandyToHammerTarget : null}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n      <Hints\r\n        boardState={{ board, setBoard }}\r\n        cursorState={{ cursor, setCursor }}\r\n        isHintClickedState={{ isHintClicked, setIsHintClicked }}\r\n        candyToHammerState={{ candyToHammer, setCandyToHammer }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}