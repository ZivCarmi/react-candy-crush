{"ast":null,"code":"import { useCallback as $bnPw9$useCallback, useState as $bnPw9$useState, useRef as $bnPw9$useRef, useEffect as $bnPw9$useEffect } from \"react\";\nimport { useCallbackRef as $bnPw9$useCallbackRef } from \"@radix-ui/react-use-callback-ref\";\nfunction $71cd76cc60e0454e$export$6f32135080cb4c3(_ref) {\n  let {\n    prop: prop,\n    defaultProp: defaultProp,\n    onChange = () => {}\n  } = _ref;\n  const [uncontrolledProp, setUncontrolledProp] = $71cd76cc60e0454e$var$useUncontrolledState({\n    defaultProp: defaultProp,\n    onChange: onChange\n  });\n  const isControlled = prop !== undefined;\n  const value1 = isControlled ? prop : uncontrolledProp;\n  const handleChange = $bnPw9$useCallbackRef(onChange);\n  const setValue = $bnPw9$useCallback(nextValue => {\n    if (isControlled) {\n      const setter = nextValue;\n      const value = typeof nextValue === 'function' ? setter(prop) : nextValue;\n      if (value !== prop) handleChange(value);\n    } else setUncontrolledProp(nextValue);\n  }, [isControlled, prop, setUncontrolledProp, handleChange]);\n  return [value1, setValue];\n}\nfunction $71cd76cc60e0454e$var$useUncontrolledState(_ref2) {\n  let {\n    defaultProp: defaultProp,\n    onChange: onChange\n  } = _ref2;\n  const uncontrolledState = $bnPw9$useState(defaultProp);\n  const [value] = uncontrolledState;\n  const prevValueRef = $bnPw9$useRef(value);\n  const handleChange = $bnPw9$useCallbackRef(onChange);\n  $bnPw9$useEffect(() => {\n    if (prevValueRef.current !== value) {\n      handleChange(value);\n      prevValueRef.current = value;\n    }\n  }, [value, prevValueRef, handleChange]);\n  return uncontrolledState;\n}\nexport { $71cd76cc60e0454e$export$6f32135080cb4c3 as useControllableState };","map":{"version":3,"sources":["C:\\Users\\Ziv\\Desktop\\Work\\ziv-react-candy-crush\\node_modules\\@radix-ui\\react-use-controllable-state\\dist\\packages\\react\\use-controllable-state\\src\\index.ts","C:\\Users\\Ziv\\Desktop\\Work\\ziv-react-candy-crush\\node_modules\\@radix-ui\\react-use-controllable-state\\dist\\packages\\react\\use-controllable-state\\src\\useControllableState.tsx"],"names":["useControllableState","prop","defaultProp","onChange","uncontrolledProp","setUncontrolledProp","useUncontrolledState","isControlled","undefined","value","handleChange","useCallbackRef","setValue","nextValue","setter","uncontrolledState","React","prevValueRef","current"],"mappings":";;ACWA,SAASA,wCAAT,CAAA,IAAA,EAIkC;EAAA,IAJD;IDXjC,IAAA,ECYEC,IAD+B;IDXjC,WAAA,ECaEC,WAF+B;IAG/BC,QAAQ,GAAG,CAAA,KAAM,CAAjBA;EAAAA,CAHF,GAAA,IAAA;EAKE,MAAM,CAACC,gBAAD,EAAmBC,mBAAnB,CAAA,GAA0CC,0CAAoB,CAAC;IDhBvE,WAAA,ECgByEJ,WAAF;IDhBvE,QAAA,ECgBsFC;GAAhB,CAAC;EACrE,MAAMI,YAAY,GAAGN,IAAI,KAAKO,SAA9B;EACA,MAAMC,MAAK,GAAGF,YAAY,GAAGN,IAAH,GAAUG,gBAApC;EACA,MAAMM,YAAY,GAAGC,qBAAc,CAACR,QAAD,CAAnC;EAEA,MAAMS,QAA6D,GAAG,kBAAA,CACnEC,SAAD,IAAe;IACb,IAAIN,YAAJ,EAAkB;MAChB,MAAMO,MAAM,GAAGD,SAAf;MACA,MAAMJ,KAAK,GAAG,OAAOI,SAAP,KAAqB,UAArB,GAAkCC,MAAM,CAACb,IAAD,CAAxC,GAAiDY,SAA/D;MACA,IAAIJ,KAAK,KAAKR,IAAd,EAAoBS,YAAY,CAACD,KAAD,CAAhC;KAHF,MAKEJ,mBAAmB,CAACQ,SAAD,CAAnBR;GAPgE,EAUpE,CAACE,YAAD,EAAeN,IAAf,EAAqBI,mBAArB,EAA0CK,YAA1C,CAVoE,CASnE;EAIH,OAAO,CAACD,MAAD,EAAQG,QAAR,CAAP;AACD;AAED,SAASN,0CAAT,CAAA,KAAA,EAGgD;EAAA,IAHf;IDrCjC,WAAA,ECsCEJ,WAD+B;IDrCjC,QAAA,ECuCEC;EAAAA,CAFF,GAAA,KAAA;EAIE,MAAMY,iBAAiB,GAAGC,eAAAA,CAA8Bd,WAA9Bc,CAA1B;EACA,MAAM,CAACP,KAAD,CAAA,GAAUM,iBAAhB;EACA,MAAME,YAAY,GAAGD,aAAAA,CAAaP,KAAbO,CAArB;EACA,MAAMN,YAAY,GAAGC,qBAAc,CAACR,QAAD,CAAnC;EAEAa,gBAAAA,CAAgB,MAAM;IACpB,IAAIC,YAAY,CAACC,OAAbD,KAAyBR,KAA7B,EAAoC;MAClCC,YAAY,CAACD,KAAD,CAAZC;MACAO,YAAY,CAACC,OAAbD,GAAuBR,KAAvBQ;IACD;GAJHD,EAKG,CAACP,KAAD,EAAQQ,YAAR,EAAsBP,YAAtB,CALHM,CAKC;EAED,OAAOD,iBAAP;AACD","sourcesContent":["export { useControllableState } from './useControllableState';\n","import * as React from 'react';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\n\ntype UseControllableStateParams<T> = {\n  prop?: T | undefined;\n  defaultProp?: T | undefined;\n  onChange?: (state: T) => void;\n};\n\ntype SetStateFn<T> = (prevState?: T) => T;\n\nfunction useControllableState<T>({\n  prop,\n  defaultProp,\n  onChange = () => {},\n}: UseControllableStateParams<T>) {\n  const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({ defaultProp, onChange });\n  const isControlled = prop !== undefined;\n  const value = isControlled ? prop : uncontrolledProp;\n  const handleChange = useCallbackRef(onChange);\n\n  const setValue: React.Dispatch<React.SetStateAction<T | undefined>> = React.useCallback(\n    (nextValue) => {\n      if (isControlled) {\n        const setter = nextValue as SetStateFn<T>;\n        const value = typeof nextValue === 'function' ? setter(prop) : nextValue;\n        if (value !== prop) handleChange(value as T);\n      } else {\n        setUncontrolledProp(nextValue);\n      }\n    },\n    [isControlled, prop, setUncontrolledProp, handleChange]\n  );\n\n  return [value, setValue] as const;\n}\n\nfunction useUncontrolledState<T>({\n  defaultProp,\n  onChange,\n}: Omit<UseControllableStateParams<T>, 'prop'>) {\n  const uncontrolledState = React.useState<T | undefined>(defaultProp);\n  const [value] = uncontrolledState;\n  const prevValueRef = React.useRef(value);\n  const handleChange = useCallbackRef(onChange);\n\n  React.useEffect(() => {\n    if (prevValueRef.current !== value) {\n      handleChange(value as T);\n      prevValueRef.current = value;\n    }\n  }, [value, prevValueRef, handleChange]);\n\n  return uncontrolledState;\n}\n\nexport { useControllableState };\n"]},"metadata":{},"sourceType":"module"}